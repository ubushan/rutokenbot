# -*- coding: utf-8 -*-
import telebot
from telebot import types
import config

bot = telebot.TeleBot(config.TOKEN)

# def log(msg, answer):
#     print('\n')
#     from datetime import datetime
#     print(datetime.now())
#     print("Message from [0] [1]. (id = [2]) \n Text - [3]".format(msg.from_user.first_name,
#                                                                   msg.from_user.last_name,
#                                                                   str(msg.from_user.id),
#                                                                   msg.msg))
#     print(answer)


def driver_error(self):
    text = '–ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –±—É–¥—É—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –†—É—Ç–æ–∫–µ–Ω'
    bot.send_message(self.chat.id, text)  # reply_markup = markup)


# def code_error(self):
#     print(type(self)) # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#     return config.head.search_kb(self)


@bot.message_handler(commands=['start'])
def start(self):
    text = """–ï—Å–ª–∏ —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–µ–Ω "–ö–æ–¥ –æ—à–∏–±–∫–∏" –Ω–∞–ø–∏—à–∏ –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XX"\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã /help"""
    bot.send_message(self.chat.id, text)


@bot.message_handler(commands=['stop'])
def start(self):
    text = '–£–∂–µ —É—Ö–æ–¥–∏—à—å? üò¢\n–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å —Ç–µ–±–µ –µ—â—ë —Ä–∞–∑, –ø–∏—à–∏, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –∏ –Ω–æ—á–∏.'
    bot.send_message(self.chat.id, text)


@bot.message_handler(commands=['help'])
def help(self):
    text = """*–ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é*\n
/help - –ü–æ–º–æ—â—å
/hotquestions - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
/mailsupport - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏\n
–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ –º–Ω–µ:
üí¨ Telegram - @ubushan
üì© Email - ubushaev08@gmail.com
üìå *–ó.–´. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...*"""
    bot.send_message(self.chat.id, text, parse_mode="Markdown")


@bot.message_handler(commands=['mailsupport'])
def start(self):
    text = """*–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    bot.send_message(self.chat.id, text, parse_mode="Markdown")


@bot.message_handler(commands=['hotquestions'])
def start(self):
    text = """*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    bot.send_message(self.chat.id, text, parse_mode="Markdown")


@bot.message_handler(content_types=['text'])
def echo(self):
    # print(type(self))
    # print(str(self.text))
    # print(self.text)
    # markup = types.ReplyKeyboardMarkup() # –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telebot, –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å :(, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞
    # markup.row('10', '37', '52', '1053')
    # markup.row('1060', '1111', '7777', '333')
    # markup.row('–ù–∞–∑–∞–¥')
    #bot.send_message(self.chat.id, self.text)  # reply_markup = markup)
    # if config.head.float_check(self.text):
    #     if self.text == self.text:
    bot.send_message(self.chat.id, config.head.search_kb(self.text), parse_mode="Markdown")
    #         #print(type(self.text)) # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    #     # else:
    #     #     bot.send_message(self.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    # elif self.text == '–ù–∞–∑–∞–¥':
    #     return start(self)
    # elif self.text == '–ü—Ä–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã':
    #     return driver_error(self)
    # else:
    #     text = """–ï—Å–ª–∏ —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–µ–Ω "–ö–æ–¥ –æ—à–∏–±–∫–∏" –Ω–∞–ø–∏—à–∏ –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX"""
    #     #print(str(self.text))
    #     bot.send_message(self.chat.id, text)
    # return '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :('


if __name__ == '__main__':
    bot.polling(none_stop=True)